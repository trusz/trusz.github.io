"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12],{9613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(n),m=o,f=l["".concat(c,".").concat(m)]||l[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=l;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},8880:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var r=n(4250),o=(n(9496),n(9613));const a={},i="Modd Config",s={unversionedId:"go/modd",id:"go/modd",title:"Modd Config",description:"Modd \u2197 is file watcher written in Go.",source:"@site/garden/snippets/go/modd.md",sourceDirName:"go",slug:"/go/modd",permalink:"/garden/snippets/go/modd",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Log",permalink:"/garden/snippets/go/log"},next:{title:"HTTP Send",permalink:"/garden/snippets/go/send"}},c={},p=[{value:"Auto Restart Programs",id:"auto-restart-programs",level:2},{value:"Auto Run Tests",id:"auto-run-tests",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"modd-config"},"Modd Config"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/cortesi/modd"},"Modd \u2197")," is file watcher written in Go.\nIt is not that popular but I found it to be the best for what I need it."),(0,o.kt)("h2",{id:"auto-restart-programs"},"Auto Restart Programs"),(0,o.kt)("p",null,"This configuration:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"formats files in a changed folder"),(0,o.kt)("li",{parentName:"ol"},"auto-imports in files in a changed folder"),(0,o.kt)("li",{parentName:"ol"},"vets the whole project"),(0,o.kt)("li",{parentName:"ol"},"restart the main process")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can find the latest version always at ",(0,o.kt)("a",{parentName:"p",href:"https://gist.github.com/trusz/1daf4cf2adb5ea96dfcc8424f9513292#file-modd-run-conf"},"trusz/modd-run.conf \u2197"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-conf",metastring:'title="modd-run.conf"',title:'"modd-run.conf"'},"@goimports = go run golang.org/x/tools/cmd/goimports\n\n**/*.go !**/*_test.go modd-dev.conf  {\n    prep +onchange: gofmt -s -w @mods\n    prep +onchange: @goimports -w @mods\n    prep: clear\n    prep +onchange: go vet ./...\n    daemon +sigterm: go run main\n}\n")),(0,o.kt)("h2",{id:"auto-run-tests"},"Auto Run Tests"),(0,o.kt)("p",null,"This configuration does almost the same as the previous one\nbut instead of restarting the program it runs all tests\nin a changed folder."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can find the latest version always at ",(0,o.kt)("a",{parentName:"p",href:"https://gist.github.com/trusz/1daf4cf2adb5ea96dfcc8424f9513292#file-modd-dev-conf"},"trusz/modd-run.conf \u2197"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-conf",metastring:'title="modd-test.conf"',title:'"modd-test.conf"'},"@goimports = go run golang.org/x/tools/cmd/goimports\n@gotestsum = go run gotest.tools/gotestsum\n\n**/*.go modd-test.conf {\n    prep +onchange: gofmt -s -w @mods\n    prep +onchange: @goimports -w @mods\n    prep +onchange: clear\n    prep +onchange: go vet ./...\n    prep +onchange: @gotestsum  --format standard-verbose @dirmods/...\n}\n")))}d.isMDXComponent=!0}}]);