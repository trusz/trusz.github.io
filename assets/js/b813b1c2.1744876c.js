"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[33],{9613:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(9496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),f=p(t),d=o,y=f["".concat(c,".").concat(d)]||f[d]||l[d]||i;return t?r.createElement(y,a(a({ref:n},s),{},{components:t})):r.createElement(y,a({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},252:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return a},default:function(){return l},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=t(4250),o=(t(9496),t(9613));const i={},a="HTTP Send",u={unversionedId:"go/send",id:"go/send",title:"HTTP Send",description:"A flexible function for sending HTTP requests.",source:"@site/garden/snippets/go/send.md",sourceDirName:"go",slug:"/go/send",permalink:"/garden/snippets/go/send",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Modd Config",permalink:"/garden/snippets/go/modd"},next:{title:"Table Driven Benchmark",permalink:"/garden/snippets/go/table-benchmark"}},c={},p=[],s={toc:p};function l(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"http-send"},"HTTP Send"),(0,o.kt)("p",null,"A flexible function for sending HTTP requests."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can find the latest version always at ",(0,o.kt)("a",{parentName:"p",href:"https://gist.github.com/trusz/1daf4cf2adb5ea96dfcc8424f9513292#file-http-go"},"trusz/http.go \u2197"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'\npackage http\n\nimport (\n    "bytes"\n    "crypto/tls"\n    "net/http"\n    "time"\n)\n\n// Send can send any HTTP method\nfunc Send(\n    method string,\n    url string,\n    payload []byte,\n    queries []httpQuery,\n) (*http.Response, error) {\n    tr := &http.Transport{\n        MaxIdleConns:        0,\n        MaxIdleConnsPerHost: 0,\n        MaxConnsPerHost:     0,\n        IdleConnTimeout:     0,\n        TLSClientConfig:     &tls.Config{InsecureSkipVerify: true},\n    }\n    client := &http.Client{Timeout: time.Minute * 2, Transport: tr}\n\n    req, err := http.NewRequest(method, url, bytes.NewBuffer(payload))\n    if err != nil {\n        return nil, err\n    }\n\n    q := req.URL.Query()\n    for _, query := range queries {\n        q.Add(query.key, query.value)\n    }\n    req.URL.RawQuery = q.Encode()\n\n    return client.Do(req)\n}\n\n// Query _\ntype Query struct {\n    key   string\n    value string\n}\n\n')))}l.isMDXComponent=!0}}]);