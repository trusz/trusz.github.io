import{s as Ls,n as Kn}from"../chunks/scheduler.63274e7e.js";import{S as Hs,i as Ms,g as a,s as o,H as S,h as e,x as u,c,j as r,B as R,f as s,k as U,a as l,z as t}from"../chunks/index.6ea29b8c.js";function Es(hs){let g,Nn="UI Components’ File Structure",an,b,Qn="Summary",en,_,Wn="Basic component file structure:",pn,C,on,ws=`<code class="language-sh">src/
└─ components/
   └─ <span class="token operator">&lt;</span>component<span class="token operator">></span>/
      ├─ index.ts                     <span class="token comment"># entrypoint</span>
      ├─ <span class="token operator">&lt;</span>component<span class="token operator">></span>.tsx              <span class="token comment"># main component</span>
      ├─ <span class="token operator">&lt;</span>sub-component<span class="token operator">></span>.tsx          <span class="token comment"># any sub component</span>
      ├─ <span class="token operator">&lt;</span>component<span class="token operator">></span>.stories.tsx      <span class="token comment"># stories about the main component</span>
      ├─ <span class="token operator">&lt;</span>component<span class="token operator">></span>.spec.stories.tsx <span class="token comment"># stories for testing purposes</span>
      └─ <span class="token operator">&lt;</span>component<span class="token operator">></span>.spec.ts          <span class="token comment"># component tests</span></code>`,cn,T,An="Details",ln,L,Dn=`The following is a styleguide that I use when working on web UIs.<br/>
Most parts are framework/library independent but usually I use the following the tech-stack:`,un,H,Jn='<li><a href="https://www.typescriptlang.org" rel="nofollow">TypeScript</a> (Language)</li> <li><a href="https://reactjs.org/" rel="nofollow">ReactJS</a> (View Library)</li> <li><a href="https://storybook.js.org/" rel="nofollow">Storybook</a> (UI-Component-Lib Framework)</li> <li><a href="https://github.com/puppeteer/puppeteer" rel="nofollow">Chrome Puppeteer</a> (Browser Automation)</li>',rn,M,Vn="Naming",kn,E,$n='<p><strong>Info</strong> More about naming here: <a href="file-naming-convention">File Naming Convention</a></p>',dn,P,Gn="Structure",mn,B,fn,vs=`<code class="language-sh">src/
└─ components/
   └─ <span class="token operator">&lt;</span>component<span class="token operator">></span>/
      ├─ index.ts                     <span class="token comment"># entrypoint</span>
      ├─ <span class="token operator">&lt;</span>component<span class="token operator">></span>.tsx              <span class="token comment"># main component</span>
      ├─ <span class="token operator">&lt;</span>sub-component<span class="token operator">></span>.tsx          <span class="token comment"># any sub component</span>
      ├─ <span class="token operator">&lt;</span>component<span class="token operator">></span>.stories.tsx      <span class="token comment"># stories about the main component</span>
      ├─ <span class="token operator">&lt;</span>component<span class="token operator">></span>.spec.stories.tsx <span class="token comment"># stories for testing purposes</span>
      └─ <span class="token operator">&lt;</span>component<span class="token operator">></span>.spec.ts          <span class="token comment"># component tests</span></code>`,gn,q,Xn=`Components are located in <code>/src/components</code> folder.<br/>
Each component has a folder with the name of the component (e.g.: <code>button/</code>)`,xn,I,Yn="In this folder there are required files:",hn,i,k,O,Zn="<code>&lt;component.tsx&gt;</code> is where the component lives (e.g.: <code>button.tsx</code>)",Cn,j,ns=`<p><strong>TIP:</strong>
If the component gets too big, split it up into sub-components: <code>&lt;sub-component&gt;.tsx</code></p>`,Tn,z,ss="✏️ Example: <code>button.tsx</code>",Ln,F,wn,ys=`<code class="language-tsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span>props<span class="token operator">:</span> React<span class="token punctuation">.</span>PropsWithChildren<span class="token operator">&lt;</span>Props<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
        onClick <span class="token operator">=</span> noopOnClick<span class="token punctuation">,</span>
        children<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
          <span class="token attr-name">access-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>
          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">&#123;</span>
  onClick<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">noopOnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></code>`,Hn,x,K,ts=`<code>index.ts</code>: we think of the folder as a package and <code>index.ts</code> exports everything
that is meant for public usage.`,Mn,N,as="✏️ Example: <code>index.ts</code>",En,Q,vn,bs=`<code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./button'</span></code>`,Pn,h,W,es=`<code>&lt;component&gt;.stories.tsx</code> creates style guide stories for the component.
Style guide stories demonstrate, among other thins, the different visual appearances.`,Bn,A,ps="✏️ Example: <code>button.stories.tsx</code>",qn,D,yn,_s=`<code class="language-tsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./button"</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    component<span class="token operator">:</span> Button<span class="token punctuation">,</span>
    title<span class="token operator">:</span> <span class="token string">'Components|Button'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">text</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello, Button!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</code>`,In,d,J,os="<code>&lt;component&gt;.spec.stories.tsx</code> contain the stories that setup components for the tests",Sn,V,cs=`<p><strong>NOTE</strong><br/>
Why not <code>&lt;component&gt;.stories.spec.tsx</code>?<br/>
Everything ending with <code>*.spec</code> are considered to be tests and would be confusing for developers<br/>
See <code>&lt;component&gt;.spec.ts</code></p>`,Rn,$,ls="✏️ Example: <code>button.spec.stories.tsx</code>",Un,G,bn,Cs=`<code class="language-tsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./button"</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    component<span class="token operator">:</span> Button<span class="token punctuation">,</span>
    title<span class="token operator">:</span> <span class="token string">'Components|Button/Test'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">TestOnClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"not clicked"</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span>
                <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"clicked"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
            <span class="token punctuation">></span></span><span class="token plain-text">
                Click to set text 1
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">access-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-target<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,On,m,X,us=`<code>&lt;component&gt;.spec.ts</code> contains the component tests<br/>
In case the spec gets too large one can split up and prefix specs e.g.:`,jn,Y,is="<li><code>&lt;component&gt;.awesome-feature.spec.tsx</code></li> <li><code>&lt;component&gt;.nasty-bugs.spec.tsx</code></li> <li><code>&lt;component&gt;.crazy-edge-cases.spec.tsx</code></li>",zn,Z,rs="✏️ Example: <code>button.spec.tsx</code>",Fn,nn,_n,Ts=`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> describe<span class="token punctuation">,</span> it <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'mocha'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> expect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'chai'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> startBrowser<span class="token punctuation">,</span> baseUrl <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'testing'</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Button'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'click action'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> clickTests<span class="token operator">:</span> TestCase<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span>
                desc<span class="token operator">:</span> <span class="token string">'has effect'</span><span class="token punctuation">,</span>
                expectedText<span class="token operator">:</span> <span class="token string">'clicked'</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

        <span class="token punctuation">]</span>

        clickTests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>testClick<span class="token punctuation">)</span>

        <span class="token keyword">function</span> <span class="token function">testClick</span><span class="token punctuation">(</span>tc<span class="token operator">:</span> TestCase<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">it</span><span class="token punctuation">(</span>tc<span class="token punctuation">.</span>desc<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> buttonSelector <span class="token operator">=</span> <span class="token string">'button[access-id="button"]'</span>
                <span class="token keyword">const</span> textSelector <span class="token operator">=</span> <span class="token string">'[access-id="text-target"]'</span>

                <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">startBrowser</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">await</span> b<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>baseUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/iframe.html?id=components-button--test-on-click</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
                <span class="token keyword">await</span> b<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>buttonSelector<span class="token punctuation">)</span>

                <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> b<span class="token punctuation">.</span><span class="token function">fetchText</span><span class="token punctuation">(</span>textSelector<span class="token punctuation">)</span>
                <span class="token function">expect</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>tc<span class="token punctuation">.</span>expectedText<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">interface</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>
            desc<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
            expectedText<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</code>`;return{c(){g=a("h1"),g.textContent=Nn,an=o(),b=a("h2"),b.textContent=Qn,en=o(),_=a("p"),_.textContent=Wn,pn=o(),C=a("pre"),on=new S(!1),cn=o(),T=a("h2"),T.textContent=An,ln=o(),L=a("p"),L.innerHTML=Dn,un=o(),H=a("ul"),H.innerHTML=Jn,rn=o(),M=a("h3"),M.textContent=Vn,kn=o(),E=a("blockquote"),E.innerHTML=$n,dn=o(),P=a("h3"),P.textContent=Gn,mn=o(),B=a("pre"),fn=new S(!1),gn=o(),q=a("p"),q.innerHTML=Xn,xn=o(),I=a("p"),I.textContent=Yn,hn=o(),i=a("ul"),k=a("li"),O=a("p"),O.innerHTML=Zn,Cn=o(),j=a("blockquote"),j.innerHTML=ns,Tn=o(),z=a("p"),z.innerHTML=ss,Ln=o(),F=a("pre"),wn=new S(!1),Hn=o(),x=a("li"),K=a("p"),K.innerHTML=ts,Mn=o(),N=a("p"),N.innerHTML=as,En=o(),Q=a("pre"),vn=new S(!1),Pn=o(),h=a("li"),W=a("p"),W.innerHTML=es,Bn=o(),A=a("p"),A.innerHTML=ps,qn=o(),D=a("pre"),yn=new S(!1),In=o(),d=a("li"),J=a("p"),J.innerHTML=os,Sn=o(),V=a("blockquote"),V.innerHTML=cs,Rn=o(),$=a("p"),$.innerHTML=ls,Un=o(),G=a("pre"),bn=new S(!1),On=o(),m=a("li"),X=a("p"),X.innerHTML=us,jn=o(),Y=a("ul"),Y.innerHTML=is,zn=o(),Z=a("p"),Z.innerHTML=rs,Fn=o(),nn=a("pre"),_n=new S(!1),this.h()},l(n){g=e(n,"H1",{"data-svelte-h":!0}),u(g)!=="svelte-16zqa5a"&&(g.textContent=Nn),an=c(n),b=e(n,"H2",{"data-svelte-h":!0}),u(b)!=="svelte-1yu8q5y"&&(b.textContent=Qn),en=c(n),_=e(n,"P",{"data-svelte-h":!0}),u(_)!=="svelte-1x76p4u"&&(_.textContent=Wn),pn=c(n),C=e(n,"PRE",{class:!0});var p=r(C);on=R(p,!1),p.forEach(s),cn=c(n),T=e(n,"H2",{"data-svelte-h":!0}),u(T)!=="svelte-1z2rwk"&&(T.textContent=An),ln=c(n),L=e(n,"P",{"data-svelte-h":!0}),u(L)!=="svelte-uuaaan"&&(L.innerHTML=Dn),un=c(n),H=e(n,"UL",{"data-svelte-h":!0}),u(H)!=="svelte-5cd6kb"&&(H.innerHTML=Jn),rn=c(n),M=e(n,"H3",{"data-svelte-h":!0}),u(M)!=="svelte-eglmpg"&&(M.textContent=Vn),kn=c(n),E=e(n,"BLOCKQUOTE",{"data-svelte-h":!0}),u(E)!=="svelte-1q6k5l5"&&(E.innerHTML=$n),dn=c(n),P=e(n,"H3",{"data-svelte-h":!0}),u(P)!=="svelte-9dyfnx"&&(P.textContent=Gn),mn=c(n),B=e(n,"PRE",{class:!0});var ks=r(B);fn=R(ks,!1),ks.forEach(s),gn=c(n),q=e(n,"P",{"data-svelte-h":!0}),u(q)!=="svelte-14qu3r5"&&(q.innerHTML=Xn),xn=c(n),I=e(n,"P",{"data-svelte-h":!0}),u(I)!=="svelte-1sh4v4t"&&(I.textContent=Yn),hn=c(n),i=e(n,"UL",{});var f=r(i);k=e(f,"LI",{});var w=r(k);O=e(w,"P",{"data-svelte-h":!0}),u(O)!=="svelte-1345829"&&(O.innerHTML=Zn),Cn=c(w),j=e(w,"BLOCKQUOTE",{"data-svelte-h":!0}),u(j)!=="svelte-u4h9op"&&(j.innerHTML=ns),Tn=c(w),z=e(w,"P",{"data-svelte-h":!0}),u(z)!=="svelte-1h64kl8"&&(z.innerHTML=ss),Ln=c(w),F=e(w,"PRE",{class:!0});var ds=r(F);wn=R(ds,!1),ds.forEach(s),w.forEach(s),Hn=c(f),x=e(f,"LI",{});var sn=r(x);K=e(sn,"P",{"data-svelte-h":!0}),u(K)!=="svelte-1qksvlv"&&(K.innerHTML=ts),Mn=c(sn),N=e(sn,"P",{"data-svelte-h":!0}),u(N)!=="svelte-1fp22ri"&&(N.innerHTML=as),En=c(sn),Q=e(sn,"PRE",{class:!0});var ms=r(Q);vn=R(ms,!1),ms.forEach(s),sn.forEach(s),Pn=c(f),h=e(f,"LI",{});var tn=r(h);W=e(tn,"P",{"data-svelte-h":!0}),u(W)!=="svelte-vw771w"&&(W.innerHTML=es),Bn=c(tn),A=e(tn,"P",{"data-svelte-h":!0}),u(A)!=="svelte-x7ix0p"&&(A.innerHTML=ps),qn=c(tn),D=e(tn,"PRE",{class:!0});var fs=r(D);yn=R(fs,!1),fs.forEach(s),tn.forEach(s),In=c(f),d=e(f,"LI",{});var v=r(d);J=e(v,"P",{"data-svelte-h":!0}),u(J)!=="svelte-1mw1gyn"&&(J.innerHTML=os),Sn=c(v),V=e(v,"BLOCKQUOTE",{"data-svelte-h":!0}),u(V)!=="svelte-zea22k"&&(V.innerHTML=cs),Rn=c(v),$=e(v,"P",{"data-svelte-h":!0}),u($)!=="svelte-yr0coc"&&($.innerHTML=ls),Un=c(v),G=e(v,"PRE",{class:!0});var gs=r(G);bn=R(gs,!1),gs.forEach(s),v.forEach(s),On=c(f),m=e(f,"LI",{});var y=r(m);X=e(y,"P",{"data-svelte-h":!0}),u(X)!=="svelte-13005rw"&&(X.innerHTML=us),jn=c(y),Y=e(y,"UL",{"data-svelte-h":!0}),u(Y)!=="svelte-vczodk"&&(Y.innerHTML=is),zn=c(y),Z=e(y,"P",{"data-svelte-h":!0}),u(Z)!=="svelte-1urg0tr"&&(Z.innerHTML=rs),Fn=c(y),nn=e(y,"PRE",{class:!0});var xs=r(nn);_n=R(xs,!1),xs.forEach(s),y.forEach(s),f.forEach(s),this.h()},h(){on.a=null,U(C,"class","language-sh"),fn.a=null,U(B,"class","language-sh"),wn.a=null,U(F,"class","language-tsx"),vn.a=null,U(Q,"class","language-js"),yn.a=null,U(D,"class","language-tsx"),bn.a=null,U(G,"class","language-tsx"),_n.a=null,U(nn,"class","language-ts")},m(n,p){l(n,g,p),l(n,an,p),l(n,b,p),l(n,en,p),l(n,_,p),l(n,pn,p),l(n,C,p),on.m(ws,C),l(n,cn,p),l(n,T,p),l(n,ln,p),l(n,L,p),l(n,un,p),l(n,H,p),l(n,rn,p),l(n,M,p),l(n,kn,p),l(n,E,p),l(n,dn,p),l(n,P,p),l(n,mn,p),l(n,B,p),fn.m(vs,B),l(n,gn,p),l(n,q,p),l(n,xn,p),l(n,I,p),l(n,hn,p),l(n,i,p),t(i,k),t(k,O),t(k,Cn),t(k,j),t(k,Tn),t(k,z),t(k,Ln),t(k,F),wn.m(ys,F),t(i,Hn),t(i,x),t(x,K),t(x,Mn),t(x,N),t(x,En),t(x,Q),vn.m(bs,Q),t(i,Pn),t(i,h),t(h,W),t(h,Bn),t(h,A),t(h,qn),t(h,D),yn.m(_s,D),t(i,In),t(i,d),t(d,J),t(d,Sn),t(d,V),t(d,Rn),t(d,$),t(d,Un),t(d,G),bn.m(Cs,G),t(i,On),t(i,m),t(m,X),t(m,jn),t(m,Y),t(m,zn),t(m,Z),t(m,Fn),t(m,nn),_n.m(Ts,nn)},p:Kn,i:Kn,o:Kn,d(n){n&&(s(g),s(an),s(b),s(en),s(_),s(pn),s(C),s(cn),s(T),s(ln),s(L),s(un),s(H),s(rn),s(M),s(kn),s(E),s(dn),s(P),s(mn),s(B),s(gn),s(q),s(xn),s(I),s(hn),s(i))}}}class qs extends Hs{constructor(g){super(),Ms(this,g,null,Es,Ls,{})}}export{qs as component};
